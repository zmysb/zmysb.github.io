<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[【CSS权威指南】第十四章学习笔记：非屏幕媒体]]></title>
    <url>%2F2018%2F08%2F12%2F%E3%80%90CSS%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E3%80%91%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E9%9D%9E%E5%B1%8F%E5%B9%95%E5%AA%92%E4%BD%93%2F</url>
    <content type="text"><![CDATA[CSS也可以用于非视觉媒体 设计特定于媒体的样式表利用HTML 和CSS中定义的机制，可以将样式表限制为仅用于特定媒体。对于HTML的样式表，可以通过media属性对媒体作出限制： 1234&lt;link media="print" href="css1.css"&gt;&lt;style media="projection, screen"&gt; body &#123;font-family: sans-serif;&#125;&lt;/style&gt; media属性可以接受一个媒体值或多个媒体值。没有为样式表增加媒体信息，它会应用于所有媒体 CSS2还定义了@media块的语法，允许在同一个样式表中为多个媒体定义样式： 123456789&lt;style&gt;body &#123;background: white; color: black;&#125;@media screen &#123; body &#123;font-family: sans-serif;&#125;&#125;@media print &#123; body &#123;font-family: serif;&#125;&#125;&lt;/style&gt; 分页媒体在CSS术语中，分页媒体是把文档表示处理为一系列离散“页面”的媒体（屏幕媒体是一种滚动的连续型媒体），打印资料，如书、幻灯片、杂志和激光打印机输出，都是分页媒体，每张幻灯片在CSS术语中就是一个“页面” 打印样式最常见的分页媒体是文档的打印输出，创作人员可以采取很多措施让用户更喜欢文档的打印输出，如改变分页或是创建专用的打印的样式 注意，打印样式也会应用于“打印预览”模式的文档显示。因此在某些情况下可以在显示器上看到打印样式 屏幕与打印的区别除了明显的物理差异，最基本的差别是字体选择：如屏幕适合字体sans-serif而打印字体serif更合适；字体大小：web不适合用点作为单位打印相反；背景：大多数打印输出都没有背景；等等 定义页面大小类似于定于元素框的方法，CSS定义了描述页面组建的页框。页框基本上由两个区组成： 页面区，这是页面中放内容的部分，类似于正常元素框中的内容区 外边距区，这是围绕页面区的部分 在CSS2中，可以定义页框的大小，还可以定义外边距大小，在CSS2.1中，创作人员只能设置外边距区的大小，均要使用@page规则来完成设置： 12@page &#123;size: 7.5in 10in; margin: 0.5in;&#125; @page &#123;size: landscape;&#125; //旋转90度打印 上述为CSS2规则，因为属性size已经从CSS2.1去除，因为缺乏实现支持 size 值： {1,2} \ auto \ portrait \ landscape \ inherit 初始值： auto 应用于： 页面区 继承值： 无 选择页面类型CSS2允许通过命名@page规则创建不同的页面类型 分页Orphans和widows分页行为重复元素页面外的元素投影样式声音样式小结]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【CSS权威指南】第十三章学习笔记：用户界面样式]]></title>
    <url>%2F2018%2F08%2F12%2F%E3%80%90CSS%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E3%80%91%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E6%A0%B7%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[CSS的绝大部分都是关于文档的样式，但还是提供了很多有用的界面样式工具，而不仅仅面向文档。类似可以重用用户默认环境的某些方面来设置文档的字体和颜色样式，甚至可以对焦点强调和鼠标光标施加影响 系统字体和颜色有时你希望自己的稳定尽可能的模仿用户的计算环境，看上去像操作系统的一部分。尽管CSS2不允许在自己的文档中重用操作系统外观的任何一个方面，不过有一组丰富的颜色和有限的字体可供选择 系统字体CSS2定义了6个系统字体关键字，分别描述如下 caption ​ 由标题控件使用的字体样式，如按钮和下拉控件 icon ​ 操作系统图标标签所用的字体样式，如硬盘驱动器、文件夹和文件图标 menu ​ 下拉菜单和菜单列表中文本使用的字体样式 message-box ​ 对话框中文本使用的字体样式 small-caption ​ 由标题小空间的标签使用的字体样式 status-bar ​ 窗口状态条中文本使用的字体样式 1a.widget &#123;font: caption;&#125; //一个功能相当于按钮的控件，使之与有标题控件（如按钮）中文本使用同样的字体系列、字体大小、字体加粗、字体风格以及字体变形 【注意】上述值只能用于font属性，且它们本身都是简写了已经（注意样式覆盖） 系统颜色【警告】CSS3颜色模块已经废弃了系统颜色关键字 CSS2定义了28格系统颜色关键字，只要能用值的环境，就可以使用这些值 p403了解 光标用户界面的另一个重要部分是光标（CSS规范中“指示设备”），由鼠标、写字板、图形书写板甚至光学读取系统之类的设备控制。在大多数Web浏览器中，光标对于提供交互反馈很有用，如光标经过一个超链接时会变成一个小手 改变光标CSS2允许改变光标图标，利用cursor属性 cursor 值： [ [,]* [ auto \ default \ pointer \ crosshair \ move \ e-resize \ ne-resize \ nw-resize \ n-resize \ se-resize \ sw-resize \ s-resize \ w-resize \ text \ wait \ help \ progress ] ] \ inherit 初始值： auto 应用于： 所有元素 继承值： 有 计算值： 对于值，为绝对URI；否则，根据指定确定 默认值auto表示用户代理应当确定最适合当前上下文的光标图标，与default不同，后者要求图标是操作系统的默认光标（通常是一个箭头） 指示和选择光标利用cursor可以将任何元素定义为像链接一样改变图标为“小手”、text图标、十字符号等 1a[href] &#123;cursor: pointer;&#125; 移动光标等待和前进提供帮助图形光标轮廓CSS还引入了用户界面样式最后一个主要方面：轮廓。有点类似于边框，不过有两个重要区别：首先轮廓不像边框那样参与到文档了中，因此轮廓出现和消失不会影响文档流；其次轮廓可能不是矩形 设置轮廓样式类似于边框，轮廓最基本的方面就是样式，利用outline-style设置 outline-style 值： none \ dotted \ dashed \ solid \ double \ groove \ ridge \ inset \ outset \ inherit 初始值： none 应用于： 所有元素 继承值： 无 计算值： 根据指定确定 轮廓样式关键字与边框样式关键字基本上相同，视觉效果也类似。另一个区别是，只能为一个outline-style值指定一个关键字（边框可以指定最多四个关键字） 轮廓宽度 outline-width 值： thin \ medium \ thick \ \ inherit 初始值： medium 应用于： 所有元素 继承值： 无 计算值： 绝对长度；如果轮廓样式为none则为0 设置轮廓颜色 outline-color 值： \ invert \ inherit 初始值： invert(或用户代理特定的值；见正文说明) 应用于： 所有元素 继承值： 无 计算值： 根据指定确定 边框和轮廓最有意思的差别：默认值invert。其导致对轮廓“后面”的像素完成反色反转。当然想为轮廓定义一种特定的颜色，只需使用任何合法的颜色值 12345a &#123; outline-color: red; outline-color: #000; outline-color: rgb(50,50,50);&#125; 类似轮廓样式和宽度，对整个轮廓只能定义一种颜色 汇总类似于设置边框样式的border属性，轮廓也有一个简写属性outline，允许一次就完成轮廓样式、宽度和颜色的设置 outline 值： [ \ \ ] \ inherit 初始值： 对简写属性未定义 应用于： 所有元素 继承值： 无 计算值： 见各个属性 小结]]></content>
  </entry>
  <entry>
    <title><![CDATA[【CSS权威指南】第十二章学习笔记：列表和生成内容]]></title>
    <url>%2F2018%2F08%2F12%2F%E3%80%90CSS%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E3%80%91%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%88%97%E8%A1%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%86%85%E5%AE%B9%2F</url>
    <content type="text"><![CDATA[先讨论基本的列表样式，再讨论内容和计数器的生成]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【CSS权威指南】第十一章学习笔记：表布局]]></title>
    <url>%2F2018%2F08%2F12%2F%E3%80%90CSS%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E3%80%91%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E8%A1%A8%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[并非一直极力避免的“表布局”，本章介绍CSS中表本身如何布局。与文档布局的其他方面比，表很特别，它本身就能够确定其他元素的元素大小，它还有其他一些特殊性规则和行为 本章奖介绍表在视觉上如何组装，另外会介绍绘制单元格边框的两种方法，还将介绍确定表及其内部元素高度和宽度的机制 表格式化与表布局不同，表格式化指组装表的基本方法，表中元素的相互关系。之后再介绍表布局 表的视觉编排表的编排有6个规则。这些规则的基础是“表格单元”。它是理论上的构造，不能为它设置样式，甚至不能通过文档对象模型来访问。这些构造只是用于描述如何组装表 表编排规则： 每个行框包含一行表格单元。表中所有行框按其在源文档中出现的顺序从上到下地填充表。因此有多少个行元素，表中就包含多少个表个行 一个行组包含多少个行框，该行组框就包含多少个表格单元 列框包含一列或者多列表格单元。所有列框按其出现的顺序依次出现的顺序依次相邻放置 列组中包含多少个列框，该列组框中就包含多少个表格单元 尽管单元格可以跨多行或者多列，不过不是CSS来定义而是文档语言来定义跨行或者跨列。每个框行或跨列的单元格是一个矩形框，其宽度或者高度分别是一个或多个单元格。这个矩形框的顶行在作为该单元格父元素的行中 单元格框不能超出表或者行组的最后一个行框。如果表结构可能造成这种情况，单元格则必须缩小，使之能放在包含它的表或行组中 表显示值 display 值： none \ inline \ block \ inline-block \ list-item \ run-in \ tabel \ inline-table \ table-row-group \ table-header-group \ table-footer-group \ table-row \ table-column-group \ table-column \ table-cell \ table-caption \ inherit 初始值： inline 应用于： 所有元素 继承值： 无 计算值： 对于浮动、定位和根元素，计算值可变（章9.7节）；否则，根据指定决定 这一章中，只讨论与表有关的值： table ​ 这个值指定一个元素定义了一个块级表。定义了一个生成块框的矩形块，相应的HTML元素是table inline-table ​ 这个值指定一个元素定义了一个行内级表。定义了一个生成行内框的矩形块，与之最接近的HTML元素是table，不过默认情况下HTML表不是行内元素 table-row ​ 这个值指定一个元素是一个单元格的行，对应HTML元素是tr table-row-group ​ 这个值指定一个元素是一个或多个行的组，对应HTML的值是tbody table-header-group ​ 这个值与table-row-group非常相似，只是格式化方面有所不同，标题行组总是在所有其他行和行组之前显示。标题组可以包含多个行。对应HTML元素是thead table-footer-group ​ 这个值与table-header-group很类似，脚注行组总是在所有其他行和行组之后显示。标题组可以包含多个行。对应HTML元素是tfoot table-column ​ 这个值声明元素描述了一个单元格的列。这个display值并不显示，主要为了帮助定义列中单元格的表示。对应HTML元素是col table-column-group ​ 这个值指定一个元素是一个或多个列的组。类似table-column元素，table-column-group元素也不显示，不过这个值有组有定义组中元素的表示。对应HTML元素是colgroup table-cell ​ 这个值指定一个元素表示表中的单个单元格。 HTML元素th和td都属于table-cell元素 table-caption ​ 这个值定义一个表的总标题 HTML4.0中表值的一般效果总结： 123456789table &#123;display: table;&#125;tr &#123;display: table-row;&#125;thead &#123;display: table-header-group;&#125;tbody &#123;display: table-row-group;&#125;tfoot &#123;display: table-footer-group;&#125;col &#123;display: table-column;&#125;colgroup &#123;display: table-column-group;&#125;td,th &#123;display: table-cell;&#125;caption &#123;display: table-caption;&#125; 以行为主CSS将其表模型定义为“以行为主”，这个模型假设创作人员创建的标记语言会显式声明行，而列是从单元格行的布局推导出来的。如第一列由各行中的第一个单元格组成 列虽然CSS表模型是面向行的，列在布局中仍有很重要的地位。虽然单元格在文档源中是行元素的后代，但它也可同是属于两个上下文。列和列组只能接受四种样式：border、background、width、visibility 匿名表对象标记语言中可能未包含足够的元素，以至于无法按 CSS的定义充分表示表，也可能创作人员没有加入所有必要的元素。考虑到这种可能性，CSS定义了一种机制，可以将“遗漏的”组件作为匿名对象插入。 对象插入规则： 如果一个table-cell元素的父元素不是table-row元素，则会在该元素及其父元素之间插入一个匿名table-row对象。所插入的这个对象将包含该table-cell元素所有的连续兄弟 如果一个table-row元素的父元素不是table、inline-table或table-row-group元素，则会在该元素及其父元素之间插入一个匿名table元素。所插入的这个对象将包含该table-row元素所有的连续兄弟 如果一个table-column元素的父元素不是table、inline-table或table-row-group元素，则会在该元素及其父元素之间插入一个匿名table元素。所插入的这个对象将包含该table-column元素所有的连续兄弟 如果一个table-row-group、table-header-group、table-footer-group、table-column-group或table-caption元素的父元素不是table元素，则会在该元素及其父元素之间插入一个匿名table元素 如果一个table或inline-table元素的子元素不是table-row-group、table-header-group、table-footer-group、table-column-group或table-caption元素，则会在该table元素及其子元素之间插入一个匿名table-row对象。这个匿名对象将包含该子元素的所有不是table-row-group、table-header-group、table-footer-group、table-column-group或table-caption元素的连续兄弟 如果一个table-row-group、table-header-group、table-footer-group、元素的子元素不是table-row元素，则在该元素和其子元素之间插入一个匿名table-row对象，这个匿名对象包含该子元素的所有本身非table-row对象的连续兄弟 如果一个table-row元素的子元素不是table-cell元素，则在该元素和其子元素之间插入一个匿名table-cell元素，这个匿名对象包含该子元素的所有本身非table-cell对象的连续兄弟 表层为了完成表的显示，CSS定义了6个不同的“层”，可以分别放表的不同方面 表标题表标题是一小段文本，描述了表内容的本质。利用属性caption-side可以把这个元素放在table上面／下面不论该表标题出现在表结构中哪个位置（在HTML中，caption元素只能出现在开始table元素的后面，其他语言可能不同） caption-side 值： top \ bottom 初始值： top 应用于： display值为table-caption的元素 继承值： 有 计算值： 根据指定确定 表单元格边框CSS有两种截然不同的边框模型。按布局来讲，如果单元格相互之间是分隔的，就是分隔边框模型在起作用。另一种选择是合并边框模型，采用这种模型，单元格之间没有可见的间隔 border-collapse 值： collapse \ separate \ inherit 初始值： separate 应用于： display值为table或inline-table的元素 继承值： 有 计算值： 根据指定确定 说明： 在CSS2中，默认值是collapse 分隔单元格边框边框间隔 border-spacing 值： ? \ inherit 初始值： 0 应用于： display值为table或inline-table的元素 继承值： 有 计算值： 两个绝对长度 说明： 除非border-collapse值为separate，否则会忽略该属性 ### 处理空白单元格 empty-cells 值： show \ hide \ inherit 初始值： show 应用于： display值为table-cell的元素 继承值： 有 计算值： 根据指定确定 说明： 除非border-collapse值为separate，否则会忽略该属性 ### 合并单元格边框合并单元格模型基本上描述了没有单元间隔是HTML表通常如何布局，以下规则使合并单元格边框与分隔单元格边框有所区别： display值为table或inline-table的元素不能有任何内边距，不过可以有外边距。因此表的外围边框与其最外单元格的边界之间不会有任何间隔 边框可以应用到单元格、行、行组、列和列组。表元素本身通常都有一个边框 单元格边框之间绝对不会有任何间隔。实际上，如果边框相邻，就会相互合并，只画出其中一个边框 一旦合并，单元格之间的边框会在单元格之间的假想表格线上居中 合并边框布局row width=(0.5 border-width0) + padding-left1 + width1 + padding-right1 + border-width1 + padding-left2 + … + padding- rightn + (0.5 border-widthn) border-widthi是指单元格i与下一个单元格之间的边距 边框合并 如果每个合并边框的border-style为hidden，它会优先于所有其他合并边框，这个位置上的所有边框都隐藏 如果某个合并边框的border-style为none，它的优先级最低 如果至少有一个合并边框的border-style值不是none，而且所有合并边框的border-style值都不是hidden，则窄边框不敌宽边框。若边框宽度相同，则考虑边框样式，按以下优先顺序：double、solid、dashed、dotted、ridge、outset、groove、inset 如果合并边框和样式都一样，但是颜色不同，按以下优先顺序使用元素的颜色：cell、row、row group、column、column group、table 表大小已经讨论过表的格式化和单元格边框显示，下面需要了解如何确定表及其内部元素的大小。确定表的宽度有两种方法：固定宽度布局和自动宽度布局。不论使用哪一种宽度算法，高度都自动计算 宽度使用属性table-layout来声明采用哪种方法来计算表宽度 table-layout 值： auto \ fixed \ inherit 初始值： auto 应用于： display值为table或inline-table的元素 继承值： 有 计算值： 根据指定确定 两者最显著的差异是速度。使用固定宽度表布局时，用户代理可以更快地计算出表的布局 固定布局固定布局之所以快主要原因是布局不依赖于表格单元内容，其布局是根据该表以及表中列和单元格的width值决定的 固定布局模型的工作包括以下简单步骤： width属性值不是auto的所有列会根据width值设置该列的宽度 如果一个列的宽度是auto——但表首行中位于该列的单元格width不是auto——则根据该单元格的宽度设置此列的宽度。如果这个单元格跨多列，则宽度在这些列上平均分配 在以上两步后，列的宽度仍然为auto，会自动确定其大小，使其宽度尽可能相等 此时表的宽度设置为表的width值或列宽度之和（取其中较大者）。如果表宽度大于其列宽总和，则将二者之差除以列数，加到所有列上 自动布局高度对齐小结]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【CSS权威指南】第十章学习笔记：浮动和定位]]></title>
    <url>%2F2018%2F08%2F12%2F%E3%80%90CSS%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E3%80%91%E7%AC%AC%E5%8D%81%E7%AB%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%B5%AE%E5%8A%A8%E5%92%8C%E5%AE%9A%E4%BD%8D%2F</url>
    <content type="text"><![CDATA[通过字体改变、背景和所有其他属性，CSS能让内容看上去不错，不过CSS在完成基本布局任务方面怎么样呢？接下来看浮动和定位。 浮动过去，只能浮动图像。但CSS允许浮动任何元素，从图像到段落再到列表，所有元素都可以浮动 float 值： left \ right \ none \ inherit 初始值： none 应用于： 所有元素 继承值： 无 计算值： 根据指定确定 浮动元素对于浮动元素，有几点要记住。首先会以某种方式将浮动元素从文档的正常流中删除，不过它还是会影响布局。要浮动一个非替换元素，必须为该元素申明一个width。浮动元素的外边距并不会合并 不浮动float: none用于防止元素浮动 浮动的详细内幕深入讨论浮动的详细内容之前，首先建立包含块（containning block）的概念。浮动元素的包含块是其最近的块级祖先元素。浮动元素会生成一个块级框，不论这个元素本身是什么 控制浮动元素摆放的特定规则： 浮动元素的左（右）外边界不能超出其包含块的左（右）内边界 浮动元素的左（右）外边界必须是原文档中之前出现的左（右）浮动元素的右（左）外边界，除非后出现的浮动元素的顶端在先出现浮动元素的底端下面 左浮动元素的右外边界不会在其右边右浮动元素的左外边界的右边。一个右浮动元素的左外边界不会在其左边左浮动元素的右外边界的左边 一个浮动元素的顶端不能比其父元素的内顶端更高。如果一个浮动元素在两个合并外边距之间，放置这个浮动元素时就好像在两个元素中间有一个块级父元素 浮动元素的顶端不能比之前所有浮动元素或块级元素的顶端更高 如果一源文档中一个浮动元素之前出现另一个浮动元素，浮动元素的顶端不能比包含该元素生成框的任何行框的顶端更高 左（右）浮动元素的左（右）边有一个浮动元素，前者的右外边界不能在其包含块的右（左）边界的右边（左边） 浮动元素必须尽可能高地放置 左浮动元素必须向左尽可能远，右浮动元素则必须向右尽可能远。位置越高，就会向右或向左浮动得越远 实用行为当浮动元素超出其父元素的底端：浮动元素的延伸问题。通过将父元素设置为浮动元素，就可以把浮动元素包含在其 父元素内。 负外边距有意思的是，负元外边可能导致浮动元素移到其父元素内边距外边。 浮动元素、内容和重叠如果一个浮动元素与正常流中的内容发生重叠会怎么样呢？ 行内框与一个浮动元素重叠时，其边框、背景、内容都在该浮动元素“之上”显示 块框与一个浮动元素重叠时，其块框和背景在该浮动元素“之下”显示，而内容在浮动元素“之上”显示 清除并不总是希望内容流过浮动元素流过浮动元素，可以利用clear属性完成，设置一个元素禁止浮动元素出现在它旁边 clear 值： left \ right \ both \ none \ inherit 初始值： none 应用于： 块级元素 继承值： 无 计算值： 根据指定确定 1h3 &#123;clear: both;&#125; 定位利用定位可以准确地定义元素框相对于其正常位置应该出现在哪里，或者相对于父元素、另一个元素甚至相对于浏览器窗口本身的位置 基本概念定位的类型通过使用position属性，可以选择4种不同类型的定位，这会影响元素生成的方式 position 值： static \ relative \ absolute \ fixed \ inherit 初始值： static 应用于： 所有元素 继承值： 无 计算值： 根据指定确定 position值的含义： static 元素框正常生成。块级元素生成一个矩形框，作为文档流的一部分。行内元素创建一个或多个行框，置于其父元素中 relative 元素框偏移某个距离。元素仍保持其未定位前的形状，它原本所占的空间仍保留 absolute 元素框从文档流完全删除，并相对于其包含块定位，包含块可能是文档中的另一个元素或者是初始包含块（见下一节的介绍）。元素原先在正常文档流中所占的空间会关闭，就好像该元素原来不存在一样。元素定位后生成一个块级框，不论其原来在正常流中是何种类型 fixed 元素框的表现类似于将position设置为absolute，不过其包含块是视窗本身 包含块本章较早前讨论过浮动元素的包含块，其包含块定义是最近的块级祖先元素。对于定位，情况就没有这么简单： “根元素”的包含块（也称初始包含块）由用户代理建立。在HTML中，根元素就是html元素。在大多数浏览器中，初始包含块是一个视窗大小的矩形 非根元素，如果其position值是relative或static，其包含块由最近的块级框、表单元格或行内块祖先框的内容边界构成 非根元素，如果其position值是absolute，包含块设置为最近的position值不是static的祖先元素（可以是任何类型） “包含块”一词实际上是“定位上下文” 偏移属性上一节的三种定位机制（relative、absolute和fixed）使用了4个属性来描述定位元素相各边相对于其包含块的偏移，称为偏移属性： top、right、bottom、left 值： \ \ auto \ inherit 初始值： auto 应用于： 定位元素（也就是position值不是static的元素） 继承值： 无 百分数： 对于top和bottom，相对于包含块的高度；对于right和left，相对于包含块的宽度 计算值： 对于相对定位元素，见以下说明；对于static元素为auto；对于长度值，是相应的绝对长度；对于百分数值，则为指定的值；否则为auto 说明： 计算值取决于一系列因素；见附录A中的相关例子 正值会导致向内偏移，使边界朝着包含块的中心移动，而负值会导致向外偏移 宽度和高度设置宽度和高度尽管有时候设置一个元素的宽高很重要，但对于定位元素却不一定，例一个绝对定位元素从上到下填充其包含块的左半部分： 1234567p &#123; position: absolute; top: 0; bottom: 0; left: 0; right:50%;&#125; 就像使用了width: 50%; height: 100%; 限制宽度和高度若有必要或需要，可以对元素宽高进行一些限制，利用最小最大属性 min-width、min-height 值： \ \ inherit 初始值： 0 应用于： 除了非替换行内元素和表元素以外的所有元素 继承值： 无 百分数： 相对于包含块的宽度 计算值： 对于百分数，根据指定确定；对于长度值，则为绝对长度；否则，为none max-width、max-height 值： \ \ inherit 初始值： 0 应用于： 除了非替换行内元素和表元素以外的所有元素 继承值： 无 百分数： 相对于包含块的宽度 计算值： 对于百分数，根据指定确定；对于长度值，则为绝对长度；否则，为none 【这些属性值不能为负】 内容溢出和剪裁如果一个元素内容对于元素来说过大，就可能溢出元素本身，CSS2允许你从中选择，还允许定义一个裁剪区域 溢出 overflow 值： visible \ hidden \ scroll \ auto \ inherit 初始值： visible 应用于： 块级元素和替换元素 继承值： 无 计算值： 根据指定确定 如果overflow设置为scroll，元素会在元素框边界处剪裁。。 内容裁剪如果一个绝对定位元素的内容溢出其内容框，而且overflow设置为要求裁剪该内容，通过属性clip可以改变裁剪区域的形状 clip 值： rect(top, right,bottom,left) \ auto \ inherit 初始值： auto 应用于： 绝对定位元素 继承值： 无 计算值： 对于矩形，4个计算长度表示裁剪矩形区域的4个边；否则，根据指定确定 （。。。） 元素可见性 visibility 值： visible \ hidden \ collapse \ inherit 初始值： visible 应用于： 所有元素 继承值： 有 计算值： 根据指定确定 绝对定位包含块和绝对定位元素元素绝对定位时，会从文档流中完全删除。然后相对于其包含块定位，其边界根据偏移属性（top、left等）放置。定位元素不会流入其他元素的内容，反之亦然。这说明定位元素可能覆盖其他元素或者被其他元素覆盖（本章后面讲到覆盖顺序的改变） 绝对定位元素的包含块是最近的position值不为static的祖先元素。创作人员通常会选择一个元素作为绝对定位元素的包含块，将其position指定为relative而且没有偏移 绝对定位元素的放置和大小4个偏移属性均指定时，元素框的宽高均由此放置绝对，若再显示设置宽高，下一节将介绍如何处理 自动边偏移绝对定位一个元素时，偏移属性未指定的，与其“静态”位置一致。这种情况下通常对定位元素的尺寸没有什么限制，假设有一些限制的话下一节介绍如何处理 非替换元素的放置和大小一般地，元素的大小和位置取决于其包含块。各个属性（width、right、padding-left等）的值也会有一些影响，不过最主要的还是其包含块 绝对定位元素会“恰当收放”以满足垂直或水平方向上各属性值和为包含块的width。在水平／垂直过度受限的情况下忽略“right”／“bottom”的值 替换元素的放置和大小替换元素和非替换元素的定位规则大不相同。因为其有固定的高宽，没有“恰当收放”行为的概念。确定替换元素的位置和大小，涉及到的行为规则： u z轴上的放置对于所有定位，最后都不免遇到这样一种情况：两个元素视图放在同一个位置上，使用z-index属性控制谁在“上层” visibility 值： \ auto \ inherit 初始值： auto 应用于： 所有元素 继承值： 无 计算值： 根据指定确定 有较高z-index值的元素离读者更近。所有整数都可以作为z-index的值，包括负数 固定定位从上一节可知，固定定位与绝对定位很类似，不过固定定位的包含块时视窗。固定定位时，元素会从文档流中去除，不会有相对于文档中任何部分的位置 相对定位理解起来相对简单的定位机制是相对定位。采用这种机制是，将通过使用偏移属性移动定位元素 小结]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【CSS权威指南】第九章学习笔记：颜色和背景]]></title>
    <url>%2F2018%2F08%2F12%2F%E3%80%90CSS%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E3%80%91%E7%AC%AC%E4%B9%9D%E7%AB%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E9%A2%9C%E8%89%B2%E5%92%8C%E8%83%8C%E6%99%AF%2F</url>
    <content type="text"><![CDATA[CSS允许向一个页面应用多种不同的颜色和背景，而且不需要任何的FONT\TABLE标记 颜色在CSS中，可以为任何元素设置前景色和背景色，从body到强调元素、超链接元素，再到几乎所有一切（列表项、整个列表、标题、表单元格，甚至从某种程度上图像也可以设置前景色和背景色）。要理解这是如何工作，需要理解元素前景中有什么，没有什么 一般来说，前景是元素的文本，不过前景还包括元素周围的边框。因此有两种方式可以影响元素的前景色：可以使用color属性，或使用某个边框属性设置颜色 前景色要设置一个元素的前景色，最容易的办法是利用属性color color 值： \ inherit 初始值： 用户代理特定的值 应用于： 所有元素 继承值： 有 计算值： 根据指定确定 在章4曾讨论过，这个属性接受任何合法颜色类型的值，例如#FF0066或rgb(1,2,30%)，也可以接受章13将介绍的系统颜色关键字 对于非替换元素，color设置了元素中文本的颜色 替换属性color有很多用法，最重要的是替换HMTL 3.2的BODY属性TEXT、LINK、ALINK、VLINK。利用伪锚类，color完全可以替换这些BODY属性 1&lt;body text="black" link="#808080" alink="silver" vlink="#333"&gt; 1234body &#123;color: black;&#125;a:link &#123;color: #808080;&#125;a:active &#123;color: silver;&#125;a:visited &#123;color: #333;&#125; 影响边框color值还可以影响元素周围的边框 影响表单元素（从理论上讲）也可以为表单元素设置color值，声明select元素有暗灰色文本很简单 1select &#123;color: rgb(33%,33%,33%);&#125; 还可以设置input元素的前景色等 继承颜色由color的定义可知，这个属性是可以继承的 背景元素的背景区包括前景之下直到边框边界的所有空间，因此内容框和内边距都是元素背景的一部分，且边框画在背景之上 CSS允许应用纯色作为背景，也允许使用背景图像创建相当复杂的效果；CSS在这方面的能力远超HTML 背景色类似于设置前景色，可以为元素声明一个背景色，使用background-color属性，它接受所有合法的颜色，还可以接受一个使背景透明的关键字 background-color 值： \ transparent \ inherit 初始值： transparent 应用于： 所有元素 继承值： 无 计算值： 根据指定确定 如果希望背景色从元素中的文本下向外稍延伸，只需要增加一些内边距。可以为几乎所有元素设置背景色，但background-color不能继承，其默认值是transparent 结合效果只需结合color和background-color就可以创造一些有用的效果 背景图像在HTML3.2中，可以通过 BODY属性的background属性向文档背景关联一个 图像 1&lt;body background="bg23.gif"&gt; 这会使用户代理加载文件bg23.gif然后把它“平铺”在文档背景中，沿水平方向和垂直方向重复放置这个图像，填满文档的整个背景。这种效果CSS也能达到，不过CSS能做到更多 使用图像 background-image 值： \ none \ inherit 初始值： none 应用于： 所有元素 继承值： 无 计算值： 绝对URI 类似于background-color，background-image也不能继承，实际上，所有的背景属性都不能继承。还需记住，指定背景图像的URL时，相对路径是结合样式表而言的 为什么背景不能继承之前专门指出过，背景不能继承。从背景图像可以了解到为什么继承背景不是一件好事。假设背景确实能继承，而且向body应用的了一个背景图像，这个图像将用于文档所有元素的背景，而且每个元素都完成自己的平铺，类似以下语句效果： 1* &#123;background-image: url(yinyang.gif);&#125; 关于背景的良好实践图像放在指定的背景颜色上。如果完全平铺不透明图象颜色倒是不会透出来，但包含alpha通道的图像格式如png，可以与背景色结合。也能使图像加载失败的时候 有方向的重复 background-repeat 值： repeat \ repeat-x \ repea-y \ no-repea \ inherit 初始值： repeat 应用于： 所有元素 继承值： 无 计算值： 根据指定确定 背景定位 background-position 值： \ \ left \ center \ right \ top \ bottom \ inherit 初始值： 0% 0% 应用于： 块级元素和替换元素 继承值： 无 百分数： 相对于元素和原图像上的相应点（见本章后的“百分数值”一节的解释） 计算值： 如果指定了，则为绝对长度偏移；否则，是百分数值 关键字图像放置关键字最容易理解。例如top right使原图放在元素内边距区的右上角。如果只出现了一个关键字，则认为另一个关键字是center 百分数值百分数值和关键字紧密相关，不过表现方式更为复杂。百分数值同时应用于元素和原图像 1p &#123;background-position: 50% 50%;&#125; //图像中描述为50%50%的点（中心点）与元素中描述为50%50%的点（中心点）对齐 长度值最后看定位的长度值。在原图像的位置提供长度值时，这些长度值将解释为从元素内边距区左上角的偏移。 如果使用长度值或百分数值，可以使用负值把原图像拉出元素的背景区（部分出现） 有方向的重复（深入）之前介绍的背景重复，对于其关键值repeat、repeat-x等总是从包含元素的左上角开始。利用background-position移动图像位置，就能使重复从其指定的位置开始 关联现在已经知道可以将背景原题像放在元素背景上的任何位置，可以控制（某种程度上）平铺。但图像往往随着文档滚动，每次用户滚动超过图像的位置，图像就会消失。使用background-attachment可以防止这种滚动 background-attatchment 值： scroll \ fixd \ inherit 初始值： scroll 应用于： 所有元素 继承值： 无 计算值： 根据指定确定 通过使用属性background-attachment可以声明原图像相对于【可视区】是固定的（fixed）不受滚动的影响 123456body &#123; background-image: url(bigyinyang.gif); background-repeat: no-repeat; background-position: center; background-attachment: fixd;&#125; 有意思的效果技术上讲，一个图像背景已经固定（fixed），它会相对于可视区定位，而不是相对于包含该图像的元素定位。不过背景将只在其包含元素中可见 汇总与字体属性一样，背景属性可以汇总到一个简写属性：background。这个属性可以 从各个其他背景属性取一个值，而且可以采用任何顺序 background 值： [ \ \ \ \ \ \ \ \ ] \ inherit 初始值： 根据单个属性 应用于： 所有元素 继承值： 无 百分数： 允许的值 计算值： 见单个属性 小结CSS给元素应用样式，除了在元素周围放置边框、额外的内外边距，还可以向任何元素设置颜色和背景 设置可以“浮动”元素，下一章介绍]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【CSS权威指南】第八章学习笔记：内边距、边框和外边距]]></title>
    <url>%2F2018%2F08%2F12%2F%E3%80%90CSS%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E3%80%91%E7%AC%AC%E5%85%AB%E7%AB%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%86%85%E8%BE%B9%E8%B7%9D%E3%80%81%E8%BE%B9%E6%A1%86%E5%92%8C%E5%A4%96%E8%BE%B9%E8%B7%9D%2F</url>
    <content type="text"><![CDATA[基本元素框上一章曾讨论过，所有文元素都生成一个矩形框，这成为元素框。描述了一个元素在文档布局中所占的空间大小，影响着其他元素的框的形状和大小 默认地，一个可以显示的文档由多个矩形框组成，这些矩形框分布开，从而不会相互重叠 宽度和高度一个元素的width被定义为从左侧内边距到右内边距的距离，height被定义为上内边界到下内边界的距离，但它们不能应用到行内非替换元素 width 值： \ \ auto \ inherit 初始值： auto 应用于： 块级元素和替换元素 继承值： 无 百分数： 相对于包含块的width 计算值： 对于auto和百分数值，根据指定确定；否值是一个绝对长度，除非元素不能应用该属性（此时为auto） height 值： \ auto \ inherit 初始值： auto 应用于： 块级元素和替换元素 继承值： 无 百分数： 相对于包含块的height 计算值： 对于auto和百分数值，根据指定确定；否值是一个绝对长度，除非元素不能应用该属性（此时为auto） 外边距和内边距元素框在元素之间只提供了很少的空间，有三种方法可以在元素周围生成额外的空间： 增加内边距 增加边框 增加外边距 接下来了解使用这些属性 外边距 margin 值： [ \ \ auto ]{1,4} \ inherit 初始值： 未定义 应用于： 所有元素 继承值： 无 百分数： 相对于包含块的width 计算值： 见各个属性 长度值和外边距设置元素外边距时，可以使用任何长度值 12img &#123;margin: 2em;&#125;h1 &#123;margin: 10px 15px 15px 5px;&#125; //顺序是上右下左 百分数和外边距对元素外边距设置百分数值，是相对于父元素的width计算，不仅适用于左右外边距，也适用于【上下外边距】！（定位元素的上下边距如果是百分数值，其处理会有所不同，章10讨论） 12div &#123;width: 200px;&#125;div &gt; p &#123;margin: 10%;&#125; //200*10%=20px; 值复制1h1 &#123;margin: 10px 1.5em 10px 1.5em;&#125; 有时为外边距输入的值会有些重复，不过不必像上面这样重复地键入这对数字，直接： 1h1 &#123;margin: 10px 1.5em;&#125; 这两个值足以取代前面的四个值。值复制的规则如下： 单边外边距属性幸运的是，确实有一种办法可以为元素单边上的外边距设置值。 margin-top、margin-right、margin-bottom、margin-left 值： \ \ auto \ inherit 初始值： 未定义 应用于： 所有元素 继承值： 无 百分数： 相对于包含块的width 计算值： 对于百分数，根据指定确定；否则，为绝对长度 负外边距和合并外边距章7曾经讨论过，可以为元素设置负外边距。这会导致元素超出其父元素，或者与其他元素重叠，但并不违反框模型 正常流中垂直相邻外边距会合并 外边距和行内元素外边距还能应用到行内元素，不过效果稍有不同。 这在规范中是允许的，向一个行内非替换元素应用外边距，它对行高没有任何影响（），其原因就在于行内非替换元素的外边距不会改变一个元素的行高。这只对行内非替换元素的上下边成立，左右两边则会增加或减少相应的距离 替换元素又有不同：为其设置外边距确实会影响行高 边框元素外边距内就是元素的边框。围绕着元素内容和内边距的一条或多条线。每个边框有三个方面：宽度或粗细、样式或外观、以及颜色 边框和背景CSS2.1明确指出，元素的背景是内容、内边距和边框区的背景 有样式的边框先来讨论边框的样式，这是边框最重要的一个方面，并不只是因为样式控制着边框的显示，而是因为如果没有样式，将根本没有边框 border-style 值： [ none \ hidden \ dotted \ dashed \ solid \ double \ groove \ ridge \ inset \ outset ]{1,4} \ inherit 初始值： 对简写属性没有没有定义 应用于： 所有元素 继承值： 无 计算值： 见各个属性（border-top-style等） 你不一定能看到边框，因为其默认样式是none 多种样式可以为边框定义多个样式： 1p &#123;border-style: solid dashed dotted solid;&#125; 关于外边距和内边距值复制的规则同样适用于边框样式 单边样式有时你可能只想为元素框的一边设置边框样式 border-top-style、border-right-style、border-bottom-style、border-left-style 值： none \ hidden \ dotted \ dashed \ solid \ double \ groove \ ridge \ inset \ outset \ inherit 初始值： none 应用于： 所有元素 继承值： 无 计算值： 根据指定确定 边框宽度一旦为边框指定一个样式，下一步就是适用border-width为它指定一个宽度 border-width 值： [ thin \ medium \ thick \ ]{1,4} \ inherit 初始值： 对简写属性没有定义 应用于： 所有元素 继承值： 无 计算值： 见各个属性（border-top-width） border-top-width、border-right-width、border-bottom-width、border-left-width 值： thin \ medium \ thick \ \ inherit 初始值： medium 应用于： 所有元素 继承值： 无 计算值： 绝对长度；如果边框样式为none或hidden则为0 根本没有边框样式为none的边框不存在，边框宽度自动设置为0 1p &#123;border-style: none; border-width: 20px;&#125; //边框宽度为0 如果希望边框出现，【必须设置边框样式】 边框颜色默认的边框颜色是元素前景色，设置颜色也很简单，利用属性border-color border-color 值： [ \ transparent ]{1,4} \ inherit 初始值： 对简写属性没有定义 应用于： 所有元素 继承值： 无 计算值： 见各个属性（border-top-color） border-top-color、border-right-color、border-bottom-color、border-left-color 值： transparent \ \ inherit 初始值： 元素的color值 应用于： 所有元素 继承值： 无 计算值： 如果没有指定值，则使用同一元素的color属性的计算值；否则，根据指定确定 透明边框你应该还记得，如果一个边框没有样式，就没有宽度。不过可以通过边框颜色值transparent创建一个有宽度的不可见框 简写边框属性 border-top、border-right、border-bottom、border-left 值： [ \ \ \ \ ] \ inherit 初始值： 对简写属性没有定义 应用于： 所有元素 继承值： 无 计算值： 见各个属性（border-width等） 全局边框 border 值： [ \ \ \ \ ] \ inherit 初始值： 根据单个属性 应用于： 所有元素 继承值： 无 计算值： 根据指定确定 使用border的缺点在于，指定定义“全局”的样式、颜色和宽度，为border提供的值将完全相等地应用到所有4个边。不过可以充分利用层叠 边框和行内元素对于处理边框和行内元素我们应该很熟悉了，很大程度上与外边距和行内元素的相应规则相同，在章7介绍过。不论为行内元素的边框指定怎样的宽度，元素的行高都不会改变。同样的，这也只对行内元素的上下边成立，左右距离会受到影响 内边距元素框的内边距在边框和内容区之间 padding 值： [ \ ]{1,4} \ inherit 初始值： 对简写元素未定义 应用于： 所有元素 继承值： 无 百分数： 相对于包含元块的width 计算值： 见单个属性（padding-top等） 说明： 内边距绝对不能为负 【内边距不合并】 百分数值和内边距为元素的内边距设置百分数，同外边距一样，百分数值要相对于其父元素的width计算 单边内边距 padding-top、padding-right、padding-bottom、padding-left 值： \ \ inherit 初始值： 0 应用于： 所有元素 继承值： 无 百分数： 相对于包含元块的width 计算值： 对于百分数值，根据指定确定；对于长度值，则为绝对长度 说明： 内边距绝对不能为负 内边距和行内元素对于行内元素，外边距和内边距存在一个重要的区别。虽然也不改变行高，但有背景色和内边距的行内非替换元素，背景可以上下延伸 内边距和替换元素不论替换元素是块级元素还是行内元素，内边距都会围绕其内容 小结能够向所有元素应用外边距、边框和内边距]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【CSS权威指南】第七章学习笔记：基本视觉格式化]]></title>
    <url>%2F2018%2F08%2F12%2F%E3%80%90CSS%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E3%80%91%E7%AC%AC%E4%B8%83%E7%AB%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%9F%BA%E6%9C%AC%E8%A7%86%E8%A7%89%E6%A0%BC%E5%BC%8F%E5%8C%96%2F</url>
    <content type="text"><![CDATA[前几章中，针对CSS如何处理文档中的文本和字体介绍了很多实用知识，这一章介绍视觉表现和前面为了强调CSS如何实现而跳过的一些问题。 视觉表现的一些理论方面，掌握视觉模型如何工作 基本框CSS假定每个元素都会生成一个或多个矩形框，这称为元素框。元素框中心有一个内容区（content area），这个内容区周围有可选的内边距、边框和外边距 内容的背景也会应用到内边距。外边距通常是透明的。内边距和边框宽度不能是负值，但外边距可以 包含块包含块就是一个元素的“布局上下文”，每个元素都相对于其包含块摆放 包含块由最近的块级祖先框、表单元格或行内块祖先框的内容边界构成 快速复习P167 正常流 非替换元素 替换元素 块级元素 行内元素 根元素 块级元素一般地，一个元素的width被定义为从左内边界到右内边界的距离，height则是从上内边界到下内边界的距离。不同高宽、内外边距相结合就可以确定文档的布局。大多数情况下，文档的高度和宽度由浏览器自动确定，这要基于可用的显示区域和其他一些因素。当然CSS下可用更直接的控制元素大小及其显示方式 对于水平和垂直布局，可以选择不同的效果： 水平格式化水平格式化复杂性在于width影响的是内容区的宽度，而不是整个可见的元素框 简单规则：正常流中块级元素元素框的水平部分总和就等于父元素的width 水平属性margin-left、bolder-left、padding-left、width、padding-right、bolder-right、margin-right这7个属性的值加起来必须是元素包含块的宽度，往往是块元素的父元素的width（块级元素的父元素几乎都是块级元素） 使用auto只有width、margin-left、margin-right可以设置为auto。 如果设置其中一个值为auto，会弥补实际值与所需总和的差距 若三个都不为auto，此时总会把margin-right强制为auto 不止一个auto时， 只有width非auto，则左右margin相等，能将元素在其父元素居中（不同于text-align只应用于块级元素的内联内容） ； 将某个外边距和width设置为auto，则设置为auto的外边距会减为0； 三个均为auto，外边距均会减为0 负外边距负外边距使子元素可能宽过父元素 百分数width、内边距和外边距设置为包含块宽度的百分数占比 替换元素非替换块级元素的所有规则同样适用于替换块级元素，其width如果设置为auto，高度也会成比例一起变化 垂直格式化一个元素的默认高度由其内容决定，高度还会受内容宽度的影响。在CSS中，可以对任何块级元素设置显式高度，高度不匹配时用户代理对大余的高度显示的视觉效果好像有额外的内边距一样，小于的高度用户代理可能会取决于overflow的值为内容区增加滚动条（以及用户代理对overflow属性的支持程度） 垂直属性margin-top、bolder-top、padding-top、width、padding-bottom、bolder-bottom、margin-bottom这7个属性的值加起来必须是元素包含块的高度，往往是块元素的父元素的height（块级元素的父元素几乎都是块级元素） 百分数一个块级正常流元素的height设置为一个百分数，则这个值是包含块height的一个百分数 auto高度在最简单的情况下，如果块级正常流元素设置height: auto，显示时其高度将恰好足以包含其内联内容（包括文本）的行盒。其默认高度是从最高块级子元素的外边框边界到最低块级子元素的外边框边界，所以子元素的外边距会“超出”盒。除非块级元素有上内边距或下内边距，上内边框或下内边框（隔开父子两个外边距，避免合并）其高度是从最高块级子元素的上边距边界到最低块级子元素的下边距边界 合并垂直外边距合并行为只应用于外边距，如果元素有内边距和边框，它们绝对不会合并 1li &#123;margin-top: 10px; margin-bottom: 15px&#125; //每项间隔15px 如果相邻块级元素垂直外边距都设置为正值，取大值 负外边距如果相邻块级元素垂直外边距都设置为负值，浏览器会选取绝对值最大的那个值；一正一负，取和 列表项列表项通常前面有一个标志“·”，其不是列表项内容区的一部分，属性list-style-position可将其放入内容内部，那么列表项整体就像一个块元素 行内元素为行内元素设置框属性，非替换元素和替换元素在内联内容方面的处理稍有不同 行布局P187 基本术语和概念P142很直观 匿名文本 所有未包含在行内元素中的字符串 123&lt;p&gt; i'm &lt;em&gt;so&lt;/em&gt; happy! //i'm和happy是匿名文本&lt;/p&gt; em框 font-size的值确定各个em框的高度 内容区 在非替换元素中，即元素中各字符的em框串在一起构成的框 在替换元素中的固有高度再加上可能有的外边距，边框或内边距 行间距 行间距只应用在非替换元素，行间距是font-height和font-size的差值，分为两部分，顶部和底部 行内框 通过向内容区增加行间距来描述。非替换元素的行内框高度即line-height的值。替换元素，行内框的高度等于内容区的高度（行间距不应用到替换元素） 行框 这是包含该行中出现的行内框的最高点和最低点的最小框。 如何逐步构造一个行框，通过这这个过程来了解一行的各部分如何共同确定其高度： 按以下步骤确定行中各元素行内框的高度： 得到各行内非替换元素及其不属于后代行内元素的所有文本的font-size值和line-height值 得到各替换元素的height、margin、border、padding值，把它们加在一起 对于各内容区，将这些元素基线与父元素基线对齐 对于指定了vertical-align值的元素，确定其垂直偏移量，改变其与基线的垂直距离 已经知道所有行内框的摆放，计算行框高度。只需将基线与最高行内框顶端之间的距离加上基线与最低行内框底端的距离 行内格式化行内非替换元素如果行中只包含非替换元素（或匿名文本）将如何构造 建立框对于非替换元素或匿名文本某一部分，font-size确定了内容区的高度，即em框高度；line-height确定了其行内框的高度 垂直对齐如果改变行内框的垂直对齐，会应用同样的高度确定原则，影响整个行框高度 管理line-height之前了解到改变一个行内元素的line-height可以导致文本重叠，不过都是针对单个元素的。如何以一种更一般的方式影响元素的line-height而避免内容重叠呢？ 对font-size有改变的元素结合使用em单位 12p &#123;font-size: 24px; line-height: 1em;&#125;big &#123;font-size: 250%; line-height&#125; //为big元素设置行高用以提高整个行框的总高度 直接改变父元素的line-height以容纳行内元素的改变 缩放行高可以看到，设置line-height最好的方式是使用一个原始数字值（缩放因子），因为改因子是一个继承值而非计算值，能应用到后代所有元素中。缩放因子在元素间逐层传递，在各层上，这个因子都作为一个乘数各元素的font-size相乘 增加框属性内边距、边框和外边距都可以应用到行内非替换元素，但不会影响行框的高度。可以影响元素左右两端距离 行内替换元素一般认为行内替换元素（如图像）有固有的高度和宽度，可能导致行框比正常要高，但不会改变行内任何元素的ling-height值，包括替换元素本身 替换元素的行内框由其内容、内外边距、边框定义 增加框属性内边距和边框像平常一样应用到行内替换元素，且其确实会影响行框的高度，因为它们作为行内替换元素的行内框的一部分；外边距也包含在行框中，它稍微特殊一点就是可以为负 替换元素和基线默认地，行内替换元素位于基线上，若增加下内边距／外边距／边框，内容区会上移。替换元素没有自己的基线，一般将其行内框的底端（实际上是下外边距边界）与基线对齐 改变元素显示章1简单提到过可以使用属性display设置一个值来影响用户代理显示的方式 display 值： none \ inline \ block \ inline-block \ list-item \ run-in \ tabel \ inline-table \ table-row-group \ table-header-group \ table-footer-group \ table-row \ table-column-group \ table-column \ table-cell \ table-caption \ inherit 初始值： inline 应用于： 所有元素 继承值： 无 计算值： 对于浮动、定位和根元素，计算值可变（章9.7节）；否则，根据指定决定 我们将忽略与表有关的值（章11）、值list-item（章12）。已经花了很大篇幅讨论了块级元素和行内元素，下面介绍inline-block元素，不过在那之前先花点时间介绍改变元素显示角色将如何改变布局 改变角色12li &#123;display: inline;&#125;a &#123;display: block;&#125; 【注意】改变的只是元素的显示角色，而不是其本质。例让一个段落生成行内框并不会把这个段落真正变成一个行内元素。display只影响元素如何显示 行内块元素实际上，行内块元素会作为替换元素放在行中。在行内块内部，会像块级元素一样设置内容的格式，就像所有块级元素或行内替换元素一样，也有属性width和height，如果比周围内容高，这些属性会使行高增加 小结尽管CSS格式化模型某些方面看起来不太直观，最初看起来没道理甚至荒谬的规则最后看来确实是合理的。很多方面块级元素都很容易理解和便于调整布局，行内元素则可能很难管理，因为有很多影响因素，还包括元素是替换还是非替换元素。 现在我们对文档布局的基础知识有所了解，下面关注如何使用各种布局属性，后几章都在讨论这个方面，首先看看最常用的框属性：内边距、边框和外边距]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【CSS权威指南】第六章学习笔记：文本属性]]></title>
    <url>%2F2018%2F08%2F12%2F%E3%80%90CSS%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E3%80%91%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%96%87%E6%9C%AC%E5%B1%9E%E6%80%A7%2F</url>
    <content type="text"><![CDATA[文本和字体不同：文本是内容，字体用于显示这个内容。使用文本属性，可以控制文本相对于该行余下内容的位置、使其作为上标、加下划线、以及改变大小写等。甚至还可以有限地模拟打字机的Tab键的使用 缩进和水平对齐如何影响文本在行中的水平定位。 缩进文本将Web页面上一个段落的第一行进行缩进，这是一种常用的文本格式化效果（去除段落之间的空行是第二常用的方法，章7会讨论）。实现文本缩进很好的方法是用test-indent属性 test-indent 值： \ \ inherit 初始值： 0 应用于： 块级元素 继承值： 有 百分数： 相对于包含块的宽度 计算值： 对于百分数值，根据指定确定；对于长度值，则为绝对长度 1p &#123;text-indent: 3em;&#125; 水平对齐text-align影响一个元素中的文本行相互之间的对齐方式 test-align CSS2.1值： left \ center \ right \ justify \ inherit CSS2值： left \ center \ right \ justify \ \ inherit 初始值： 用户代理特定的值；还可能取决于书写方向 应用于： 块级元素 继承值： 有 计算值： 根据指定确定 说明： CSS2.1去除一个值，因为没有相应实现 text-align: center与元素大不相同：不仅影响文本，还会把整个元素居住。test-align不会控制元素的对齐，而只影响其内部内容 垂直对齐简单概述垂直对齐，文本行的构造会在章7详细讨论 行高line-height属性是指文本行基线之间的距离，不是字体的大小，确定了将各个元素框的高度增加或减少多少。line-height的值和字体大小之差才是行间距 line-height 值： \ \ \ normal \ inherit 初始值： normal 应用于： 所有元素（不过请参考替换元素和块级元素的介绍） 继承值： 有 百分数： 相对于元素的字体大小 计算值： 对于长度和百分数值是绝对数值；否值，根据指定确定 在应用到块级元素时，定义的是元素中文本基线之间的最小距离，而不是一个绝对数值，文本基线拉开的距离可能比line-height值更大。应用到替换元素，章7讨论 构造文本行文本行中的每个元素都会生成一个内容区，这由字体大小确定。内容区则会生成一个行内框（inline box），如果不存在其他因素，这个行内框就完全等于该元素的内容区。line-height产生的行间距就是在增加或减少各行内框高度因素之一 P142图片很直观 指定line-height的值默认值normal由用户代理计算，通常是字体大小的1.2倍，使得行内框高于给定元素的font-size值 行高和继承当一个块级元素从另一个元素继承line-height时，要从父元素字体大小计算，而不是子元素上计算。如果line-height小，font-size大就会出现一些问题。 12345&lt;div&gt; &lt;p&gt; this text for test &lt;/p&gt;&lt;/div&gt; 123body &#123;font-size: 10px;&#125;div &#123;line-height: 1em;&#125; //字体大小继承body，行高为10*1=10pxp &#123;font-size: 18px;&#125; //字体大于行高，文本行之间有交叠 显式地为每个元素设置line-height不如指定一个缩放因子（number）： 123body &#123;font-size: 10px;&#125;div &#123;line-height: 1;&#125; //指定一个数p &#123;font-size: 18px;&#125; line-height指定一个数时，缩放因子将是继承值而不是计算值。这个数会应用到该元素及其所有子元素，所以各元素都根据自己的font-size计算line-height 垂直对齐文本在CSS中vertical-align属性只能应用于行内元素和替换元素，且不能继承 vertical-align 值： baseline \ sub \ super \ top \ next-top \ middle \ botton \ text-bottom \ \ \ inherit 初始值： baseline 应用于： 行内元素和表单元格 继承值： 无 百分数： 相对于元素的line-height值 计算值： 对于长度值和百分数，为绝对长度；否值，根据指定确定 垂直对齐会使文本行变高（文本行框描述：其高度足以包含最高行内框的顶端和最低行内框的底端，这包括因垂直对齐上升或下降的行内框） 基线对齐verticcal-align: baseline要求一个元素的基线与父元素的基线对齐。如果一个垂直对齐元素没有基线（图像或表单输入元素，或其他替换元素），则该元素底端与父元素基线对齐 上标和下标verticcal-align: sub／super声明会使一个元素变成下／上标，其基线（或替换元素底端）相对于父元素的基线降低／升高，但不会改变字体大小 底端对齐verticcal-align: bottom将元素行内框的底端与行框的底端对齐 verticcal-align: text-bottom是指将行内文本的底端（替换元素或任何其他类型的非文本元素会忽略这个值） 顶端对齐verticcal-align: top的效果与botton刚好相反。类似的verticcal-align: text-top则与verticcal-align: text-bottom作用相反 居中对齐middle把行内元素框的中点与父元素基线上方0.5ex处的一个点对齐（这里的1ex相对于父元素的font-size定义） 百分数使用百分数不能模仿图像的align=”middle”（垂直）对齐，如果为verticcal-align设置一个百分数，会把元素的基线（或替换元素的底边）相对于父元素的基线升高或降低指定的量（该元素line-height乘百分数） 长度对齐为verticcal-align设定一个长度，则把一个元素升高或降低指定的距离 字间隔和字母间隔字间隔word-spacing用于修改字间间隔，默认值normal与设置值为0等价 word-spacing 值： \ normal \ inherit 初始值： normal 应用于： 所有元素 继承值： 有 计算值： 对于normal，为绝对长度0；否值，是绝对长度 字母间隔letter-spacing与word-spacing类似，区别是字母间隔修改的是字符或字母之间的间隔 间隔和对齐word-spacing的值可能受text-align属性值的影响。如果一个元素是两端对齐的，字母和字之间的空间可能会调整，以便文本在整行中刚好放下，这可能又会改变创作人员声明的字和字母间隔。若指定了字母间隔，则只改变字间隔。 文本转换text-transform属性处理文本的大小写 text-transform 值： uppercase \ lowercase \ capitalize \ none \ inherit 初始值： none 应用于： 所有元素 继承值： 有 计算值： 根据指定确定 uppercase和lowercase将文本转化为全大／小写，capitalize将文本转化为单词首字母大写 文本装饰text-decoration属性 text-decoration 值： [ underline \ \ overline \ \ line-through \ \ blink ] \ none \ inherit 初始值： none 应用于： 所有元素 继承值： 无 计算值： 根据指定确定 underline／overline给文本加下／上划线，line-through给文本加一根贯穿线，blink会让文本闪烁 怪异的装饰text-decoration不能继承，意味着文本上画的任何装饰线（上下划线和贯穿线）与父元素的颜色相同，即使后代元素本身有其他颜色，处理一般使用覆盖（为后代元素声明不同装饰） 文本阴影 text-shadow 值： none \ [ \ \ ? , ]* [ \ \ ? ] \ inherit 初始值： none 应用于： 所有元素 继承值： 无 计算值： 根据指定确定 默认情况是文本没有阴影。否值理论上可以定义一个或多个阴影，每个阴影都由一个颜色和3个长度值来定义。前两个长度值确定了阴影和文本的偏移距离，第三个长度可选，定义了阴影的“模糊半径” 处理空白格 white-space 值： none \ nowrap \ pre \ pre-wrap \ pre-line \ inherit 初始值： normal 应用于： 所有元素 继承值： 无 计算值： 根据指定确定 white-space可以影响浏览器处理字之间和文本行之间空白格的方式。 值 空白符 换行符 自动换行 pre-line 合并 保留 允许 normal 合并 忽略 允许 nowrap 合并 忽略 不允许 pre 保留 保留 不允许 pre-wrap 保留 保留 允许 文本方向大部分语言阅读流向都是从左到右，从上到下。不过也不是所有语言都如此 direction 值： ltr \ rtl \ inherit 初始值： ltr 应用于： 所有元素 继承值： 有 计算值： 根据指定确定 direction属性影响块级元素中文本的书写方向、表中列布局的方向、内容水平填充其元素框的方向，以及两端对齐元素中最后一行的位置。对于行内元素，只有当unicode-bidi属性设置为embed或bidi-override时才会应用direction属性 unicode-bidi 值： normal \ embed \ bidi-override \ inherit 初始值： normal 应用于： 所有元素 继承值： 无 计算值： 根据指定确定 P164 小结改变文本的外观，除了字体还有很多方法来改变文本的外观。除了一些经典的效果（如下划线），CSS还允许在文本上画线，或穿越文本画线；改变单词和字母间的间隔大小；将段落（或其他块级元素）的首行缩进；将文本左对齐右对齐等等。 但这些行为有些得到了很好的支持，有些则根本不支持。下一章介绍行布局。]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【CSS权威指南】第五章学习笔记：字体]]></title>
    <url>%2F2018%2F08%2F12%2F%E3%80%90CSS%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E3%80%91%E7%AC%AC%E4%BA%94%E7%AB%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%AD%97%E4%BD%93%2F</url>
    <content type="text"><![CDATA[CSS试图为所有字体问题提供一些解决机制，不过它不能提供一个全面的解决方案。CSS文字处理中最复杂的部分是字体系列（font-family）匹配和字体加粗（font-weight）匹配，其次是字体大小（font-size）计算。CSS与字体相关的方面还包括字体风格（如斜体）和字体变形（如小型大写字母）。字体样式的所有方面都集中到一个属性，即font，本章后面会讨论这个 属性。 字体系列除了特定字体（Times、Verdana或Arial等），CSS还定义了5种通用字体系列： Serif： 字体成比例（字体中所有字符根据其大小不同有不同的宽度，如小写i和m有不同宽度），有衬线 Sans-serif： 成比例，无衬线 Monospace 不成比例（每个字符等宽），通常用于模拟打字机文本，可能有衬线也可能没有 Cursive 模仿人手写体 Fantasy 一些无法用任何特征来定义的字体，但无法归入上列4种 可以使用属性font-family在文档中采用上述任何字体系列 font-family 值： [[ \ ],]* [ \ ] \ inherit 初始值： 用户代理指定的值 应用于： 所有元素 继承值： 有 计算值： 根据指定确定 使用通用字体系列1body &#123;font-family: sans-serif;&#125; //从sans-serif字体系列选择一个字体应用到body 指定字体系列1h1 &#123;font-family: Georgia;&#125; //使用Georgia应用在h1上 如果Georigia字体不可用，则使用另外一种serif字体。强烈建议在所有font-family规则中都提供一个通用字体系列 字体加粗利用font-weight属性，CSS允许对字体加粗有更多控制 font-weight 值： normal \ bold \ bolder \ lighter \ 100 \ 200 \ 300 \ 400 \ 500 \ 600 \ 700 \ 800 \ 900 \ inherit 初始值： normal 应用于： 所有元素 继承值： 有 计算值： 数字值（如100等等），或某个数字值加上某个相对数（bolder或lighter） 1b &#123;font-weight: bold;&#125; 加粗如何起作用关键字100～900与一个字体内置的加粗级别：100对应最细的字体变形，900对应最粗的字体变形 如果给定的字体系列中定义的加粗度少于9种，用户代理需要以一种预定方式填补这些“空白”： 如果未指定值500的加粗度，其字体加粗度与400的相应加粗相同 如果未指定值300的加粗度，则为之指定一个比400更细的变形。如果没有更细的变形，为300指定的变形等同于400的相应变形，通常为normal或medium。这种方法同样适用于200和100 如果未指定值600的加粗度，则为之指定一个比400更粗的变形。如果没有更粗的变形，为600指定的变形等同于500的相应变形。这种方法同样适用于900、800和700 如Times的一种缩减版本，只含两种加粗变形： 字体 指定的关键字 指定的数字 TimesRegular normal 100,200,300,400,500 TimesBold bold 600,700,800,900 让字体更粗加粗上移： 若给一个元素的加粗设置为bolder，用户代理先确定其从父元素继承的font-weight值。然后选择一个数，比继承值更粗的一个字体加粗值，并且在满足条件的所有数中，选择最小那个数。若没有可用的变形字体，把该元素的加粗值设置为下一个个更大的数字值，若900不变。 让字体更细加粗下移： 与加粗上移同理反向 字体大小 font-size 值： xx-small \ x-small \ small \ medium \ large \ x-large \ xx-large \ smaller \ larger \ \ \ inherit 初始值： medium 应用于： 所有元素 百分数： 根据父元素的字体大小来计算 继承值： 有 计算值： 数字值（如100等等），或某个数字值加上某个相对数（bolder或lighter） 与font-weight关键字bolder和lighter的方式类似，属性font-size也有两个相对大小关键字：larger和smaller。类似于相对字体加粗，这些关键字会导致font-size的计算址上移或下移。首先了解一下如何确定字体大小： 实际上font-size属性和你看到的实际字体大小之间的具体关系由字体设计者决定，这种关系设置为字体本身中有一个em方框。它指示没有额外行间距（CSS中的line-height）设置字体时基线间的距离（字体的字符可能比其高／低／相等）。font-size的作用是为给定字体的em框提供一个大小，不保证实际显示的字符就是这个大小 绝对大小font-size有七个绝对大小关键字：xx-small、x-small、small、medium、large、x-large、xx-large。没有明确的定义，只有相对的定义。 根据CSS1规范，一个绝对大小与下一个绝对大小之间的差别（或缩放因子）应当是向上1.5，或向下0.66（不同用户代理的缩放因子可能不同；CSS2中缩放因子可能介于1.0～1.2之间） 假设medium等于16px，对于不同缩放因子，绝对大小如下： 关键字 缩放1.5 缩放1.2 xx-small 5px 9px x-small 7px 11px small 11px 13px medium 16px 16px large 24px 19px x-large 36px 23px xx-large 54px 28px 相对大小font-size有两个相对大小关键字：larger和smaller，使元素大小相对于其父元素的大小在绝对大小梯度上进行上移和下移，使用计算绝对大小时采用的缩放因子 不同于加粗的相对值，相对大小值不必限制在绝对大小范围内（可以超过xx-large和小于xx-small） 百分数和大小和相对大小关键字很相似。总是根据从父元素继承的大小来计算。不同于相对大小关键字的是，百分数允许对计算大小有更细的控制 字体大小和继承尽管CSS中font-size是可以继承的，但继承的是计算值而不是百分数（步步计算取整），例： 1&lt;p&gt;this text contain both&lt;em&gt;emphasis and&lt;strong&gt;strong emphasis&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 123p &#123;font:size: 12px;&#125;em &#123;font-size: 120%;&#125; //12*120%=14.4pxstrong &#123;font-size: 135%;&#125; //14.4*135%=19.44px 可能造成问题：缩放失控（取整错误累计）。多级嵌套的元素难以阅读 使用长度单位可以使用章4讨论的任何长度值来设置font-size，以下所有font-size声明等价： 12345p.one &#123;font-size: 36pt;&#125;p.two &#123;font-size: 3pc;&#125;p.three &#123;font-size: 0.5in;&#125;p.four &#123;font-size: 1.27cm;&#125;p.five &#123;font-size: 12.7mm;&#125; 不同操作系统作用于不同分辨率的显示媒体上，显示结果与现实可能不能完全匹配（p.three可能不为半英寸），但度量彼此之间是一致的 由于这些差别，创作人员选择像素指定字体大小。如果界面上既有文本又有图像，就很适合采用这种方法。缺点是ie6之前不允许用户轻松调整用像素设置的文本大小（其他浏览器包括ie7支持）。因此使用像素来设置文本大小同其他方式一样，无法保证总有同样的大小。本章讨论的其他方法（如关键字和百分数）都更为健壮，可以用这些方法在用户默认字体大小的基础上缩放文本 风格和变形font-style和font-variant 有风格的字体font-style用于在normal文本、italic文本和oblique文本之间进行选择 font-style 值： italic \ oblique \ normal \ inherit 初始值： normal 应用于： 所有元素 继承值： 有 计算值： 根据指定确定 斜体（italic）是一种单独的字体风格，对字母的结构有所改动 倾斜（oblique）文本则是正常竖直（normal）的一个倾斜版本 字体变形 font-variant 值： small-caps \ normal \ inherit 初始值： normal 应用于： 所有元素 继承值： 有 计算值： 根据指定确定 font-variant只有两个非继承值：默认值normal和small-caps，small-caps要求使用小型大写字母文本。 拉伸和调整字体font-stretch和font-size-adjust，目前少有浏览器支持，了解 font属性font属性是涵盖所有其他字体属性（以及少数其他内容）的一个简写属性 font 值： [ \ \ \ \ ]? [ / ]? ] \ caption \ icon \ menu \ message-box \ small-caption \ status-bar \ inherit 初始值： 根据单个元素 应用于： 所有元素 继承值： 有 百分数： 对于要对于父元素计算；对于则相对于元素的计算 计算值： 见单个属性（font-style等） 前三个值允许采用任意的顺序出现，后两个更为严格，必须在font声明中出现且按这个顺序 增加行高font还可以设置line-height，尽管它不是字体属性而是一个文本属性。它是对font-size值的一个补充，并用一个斜线（／）与之分隔 适当地使用简写使用font简写时，所有被忽略的值都会被重置为其默认值 12h1, h2 &#123;font: italic small-caps 250% sans-serif;&#125;h2 &#123;font: 200% sans-serif;&#125; //h2不会有斜体和小型大写字母效果 使用系统字体一些值是Web页面结合用户操作系统的设置，font的系统字体值很方便。这些址取得操作系统的字体大小、字体系列、字体加粗、字体风格和字体变形，并将其应用到一个元素。这些值如下： caption 用于有标题的控件，如按钮 icon 用于对图标加标签 menu 用于菜单，即下拉菜单的菜单列表 messege-box 用于对话框 small-caption 用于对小控件加标签 status-bar 用于窗口状态条 例 你想把一个按钮的字体设置为与操作系统中的按钮字体完全相同： 1button &#123;font: caption;&#125; 字体匹配CSS允许匹配字体系列、加粗和变形，都是通过字体匹配完成的，接下来介绍字体匹配如何工作的 P132暂留 小结尽管创作人员不能指望文档中一定使用某个特定的字体，不过可以很容易地指定通用字体系列，且这种行为得到了很好的支持。对于字体管理的其他方面，相应的支持程度则有所不同。一般已经能很好的改变字体大小，对创作人员来说，让人困惑的往往不是以何种方式支持大小调整，而是想用的一些单位（点）在不同媒体上得到的结果往往差异很大，甚至在不同的用户代理和操作系统上也得到不同结果。在Web设计中使用长度单位通常不是一个好主意。百分数、em、ex单位往往更适合修改字体大小，因为这些单位在所有常用显示环境中能很好地缩放 为文本指定样式还有很多不涉及到字体的属性，这是下一章要讲的内容]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【CSS权威指南】第四章学习笔记：值和单位]]></title>
    <url>%2F2018%2F08%2F12%2F%E3%80%90CSS%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E3%80%91%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%80%BC%E5%92%8C%E5%8D%95%E4%BD%8D%2F</url>
    <content type="text"><![CDATA[099等 长度单位所有长度单位都可以表示为整数或实数，其后跟有一个两字母缩写，它表示所指定的具体长度单位，如in（英寸）或px（像素）。0后不需要跟单位 这些单位划归为两类，绝对长度单位和相对长度单位 绝对长度单位英寸（in）／厘米（cm）／毫米（mm）／点（pt）／派卡（pc） 处理绝对长度：根据单位英寸像素数（ppi）与现实世界比例拉伸。在打印文档时更为有用，在Web设计中试图使用绝对长度单位不是最佳做法 相对长度单位em／ex／px em和ex单位1“em”定义为一种给定字体的font-size值，这个值可能随元素的不同而不同 12345h1 &#123;font-size: 24px;&#125;h2 &#123;font-size: 18px;&#125;h3 &#123;font-size: 14px;&#125;h1, h2, h3 &#123;margin-left: 1em;&#125; //24px 18px 14px “ex”是指所用字体中小写x的高度 像素长度无法调整文本大小，“em”可以。但非常适合度量图像大小。 为什么像素定义为相对长度呢：CSS规范建议如果一个显示类型的设置与96ppi截然不同，用户代理应当把像素度量缩放成一种“参考像素”进行重新缩放。 如何取舍根据上述所有问题，最好的度量可能是相对度量“em”，如果合适也可以使用“px”。总的来说em是最灵活的，因为它随字体大小缩放，元素和元素操作都能更为一致；对于元素的其他方面，可能更适合使用像素，如元素的边框或定位。 URL语法：url(protocol://server/pathname)或url(pathname)，例导入外部样式表： 12@import url(sheet.css) //使用相对地址导入外部样式表body &#123;background: url(images/pictures2.jpg);&#125; //使用背景图片 关键字有一个值需要某个词来描述，这种词就称为关键词。如果一个属性接受关键字，那么其关键字只针对对该属性的作用域定义。如果两个属性都使用同一个词作为关键字，一个属性的关键字与另一个属性的统一关键字就可能有不同行为（normal对letter-spacing和font-style）。 inherit：所有属性共有的，是一个属性的值与其父元素的值相同。多数情况下不必指定，大多数属性会自然地继承。 小结单位和值的覆盖面很广，从长度单位到描述效果（如underline）的特色关键字，再到颜色单位，还包括文件（如图像）的位置。 这些单位都各有优缺点，这取决于它们在什么场合下使用，我们已经了解了这样一些环境，本书余下的内容将重点讨论这些场合，首先从CSS属性开始，CSS属性描述了如何改变文本的显示方式]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【CSS权威指南】第三章学习笔记：结构和层叠]]></title>
    <url>%2F2018%2F08%2F12%2F%E3%80%90CSS%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E3%80%91%E7%AC%AC%E4%B8%89%E7%AB%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%BB%93%E6%9E%84%E5%92%8C%E5%B1%82%E5%8F%A0%2F</url>
    <content type="text"><![CDATA[确定应当向一个元素应用哪些值时，用户代理不仅要考虑继承,还要考虑声明的特殊性，另外还需要考虑声明本身的来源。这个过程称为层叠，接下来讨论这3种机制之间的关联。 特殊性从章2了解到可以使用多种不同方法选择元素，一个元素可以用多个规格来选择，每个规则都有自己的选择器。如果一个元素有两个或多个冲突的属性声明，用户代理通过计算特殊性决定哪个声明胜出 选择器的特殊性由选择器本身的组件确定 规则 特殊性值 内联样式 1,0,0,0 选择器中给定的ID属性值 0,1,0,0 选择器中给定的各个类属性值、属性选择或伪类 0,0,1,0 选择器中给定的各个元素和伪元素 0,0,0,1 结合符、通配选择器 0,0,0,0 重要声明声明的结束分号前插有!important的声明，没有特殊的特殊性值，与非重要声明分开考虑。但一个重要声明和一个非重要声明冲突，重要声明总是胜出 继承继承机制，样式不仅应用到指定的元素，还会应用到它的后代元素（有些属性不能继承：如大多数框模型属性） 继承的值没有特殊性（不同于通配符的0特殊性，0特殊性强于没有特殊性），例： 1&lt;h1 id="page-title"&gt;Meerkat&lt;em&gt;Central&lt;/em&gt;&lt;/h1&gt; 12* &#123;color: gray;&#125;h1#page-title &#123;color: black;&#125; “Central”颜色会是灰色，因为em元素获得的h1元素继承值没有特殊性 层叠特殊性相等的多个规则应用于同一个元素如何解决冲突：层叠规则 找出所有相关规则，这些规则都包含一个与给定元素匹配的选择器 按权重和来源排序：从大到小 读者的重要声明 创作人员的重要声明 创作人员的正常声明 读者的正常声明 用户代理声明 按特殊性排序：权重来源相同，特殊性大的优先 按顺序排序：权重、来源、特殊性均相同，最后出现的规则优先 非CSS表现提示：文档可能包含一些非CSS表现提示如font元素。其被处理的特殊性为0并出现在创作人员样式表的最前面，只要有创作人员或读者样式就会被覆盖 小结层叠样式表最基本的一个方面就是层叠了——冲突的声明要通过这个层叠过程排序，并由此确定最终的文档表示。这个过程的核心是选择器及其相关声明的特殊性，以及继承机制 在下一章中，将介绍多种用于为属性值提供含义的单位。就能清楚地了解全部基础知识，并做好进一步学习指定文档样式的属性的准备]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【CSS权威指南】第二章学习笔记：选择器]]></title>
    <url>%2F2018%2F08%2F12%2F%E3%80%90CSS%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E3%80%91%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E9%80%89%E6%8B%A9%E5%99%A8%2F</url>
    <content type="text"><![CDATA[基本规则例 为了使所有h2显示为灰色，没有CSS的情况，需要给每一个h2元素插入font元素： 1&lt;h2&gt;&lt;font color="gray"&gt;This is h2 text&lt;font&gt;&lt;/h2&gt; 利用CSS规则： 1h2 &#123;color: gray;&#125; 规则结构 声明 关键字规则的结构： 1选择器 &#123;声明块&#125; 声明块由一个或多个声明构成，声明的结构： 1属性: 值; 几乎在所有情况下，值要么是一个关键字，要么是该属性可取关键字的一个列表（包含一个或多个关键字），关键字之间用空格分隔 分组选择器分组：为多个元素应用同一个声明 1h1, h2 ,h3 &#123;color: gray;&#125; 声明分组：为元素一次应用多个声明 1234h1 &#123; color: gray; font: 18px Helvetica;&#125; 结合两种分组 1234h1, h2 ,h3 &#123; color: gray; font: 18px Helvetica; &#125; 元素选择器选择器直接指示文档元素： 1h1 &#123;color: gray;&#125; 类选择器和ID选择器独立于元素进行选择，实际是对具体属性（class/id）的属性值进行选择 类选择器类选择器使用“.”引用元素class属性中的值 12&lt;p class="warning"&gt;the possibility of implosion is very real!&lt;/p&gt;&lt;p&gt;the possibility of &lt;span class="warning"&gt;implosion&lt;/span&gt; is very real!&lt;/p&gt; 12.warning &#123;color: red;&#125; //class属性值包含warning的元素字体为红p.warning &#123;font-weight: bold;&#125; //class属性值包含warning的p元素字体加粗 多类选择器class值包含一个词列表，类选择器也可链接多个（顺序不限制），意为class中同时包含链接词的元素 1.warning.help &#123;color: red;&#125; //class值同时包含warning和help的元素前景色为红色 ID选择器类选择器使用“#”引用元素id属性中的值 类选择器还是ID选择器 类选择器 ID选择器 多个元素指定为同一类且文档可含多个 指定一个元素且一个文档只使用一次 可以链接使用 不可以链接使用（id属性不支持词列表） 属性选择器独立于元素进行选择，对属性及属性值进行选择 简单属性选择选择包含某个属性的元素 123[title] &#123;bolder: 3px solid red;&#125;img[alt] &#123;bolder: black;&#125;a[href][title] &#123;font-weight: bold;&#125; 根据具体属性值选择选择包含某个具体属性值的元素 1p[class="warning"] &#123;font-weight: bold;&#125; 根据部分属性值选择如果属性能接受词列表（词之间用空格分隔），可以根据其中任意一个词进行选择 1p[class～="warning"] &#123;font-weight: bold;&#125; 类型 描述 [foo~=”bar”] 选择foo属性值包含“bar”的所有元素 [foo^=”bar”] 选择foo属性值以“bar”开头的所有元素 [foo$=”bar”] 选择foo属性值以“bar”结尾的所有元素 [foo*=”bar”] 选择foo属性值包含子串“bar”的所有元素 特定属性选择一般的，[att|=”val”]可以用于任何属性及其值 1*[lang|="en"] &#123;color: red;&#125; 最常见用语匹配语言值，本章后面还会介绍 使用文档结构理解父子结构父子结构是祖先-后代关系的特例 后代选择器（上下文选择器）在后代选择器中，规则左边的选择器一端包含两个或多个用空格结合符分隔的左到右有祖先-后代关系的选择器 1h1 em &#123;color: red;&#125; //h1元素的所有子孙em元素 选择子元素不希望选择任一一个后代，缩小范围只想选择一个元素的子元素，使用子结合符，即大于号（&gt;） 1p &gt; span &#123;color: red;&#125; //p元素的所有儿子span元素 选择相邻兄弟元素想选择一个元素后紧接的兄弟元素，使用相邻兄弟结合符，即加号（+） 1h1 + p &#123;color: red;&#125; //h1后的所有p元素，且和h1元素同父元素 伪类和伪元素伪元素为文档中“不一定存在的结构”指定样式 伪类为某些元素（甚至文档本身）的状态所指示的幻想类指定样式 伪类选择器伪类选择器使用“:”引用元素伪类 考虑锚元素（a），基本上有两种锚类型：已访问的和未访问的。这些类型称为伪类，使用这些伪类的选择器称为伪类选择器 链接伪类： 伪类名 描述 :link 指示作为超链接（即有一个href属性）并指向一个未访问地址的所有锚 :visited 指示作为已访问地址超链接的锚 动态伪类 伪类名 描述 :hover 指示鼠标指针停留在哪个元素上 :active 指示被用户输入激活的元素 动态伪类可能带来一些实际问题：引起文档重绘 选择第一个子元素1p:fisrt-child &#123;color: red;&#125; //作为第一个子元素的所有p元素（看起来像给这个p元素加上了一个名为“fisrt-child”的类） 根据语言选择:lang()伪类选择器类似|=属性选择器，主要差别在于语言信息可以从很多来源得到，不一定只有lang属性中，伪类选择器更健壮 1:lang(fr) &#123;font-style: italic;&#125; //选择语言为法语的元素 伪元素选择器就像伪类为锚指定幻想类一样，伪元素能够在文档中插入假想元素 设置首字母样式1p:first-letter &#123;color: red;&#125; //为所有p元素的第一个字母设为红色（看起来像为p元素内容的第一个字母套上了"&lt;first-letter&gt;"元素） 设置第一行样式1p:first-line &#123;color: red;&#125; //为所有p元素的第一行设为红色（看起来像为p元素内容的第一个行套上了"&lt;first-line&gt;"元素） 设置之前和之后的样式12h2:before &#123;content: "&#125;"; color: silver&#125; //在每个h2元素前加一个银色中括号body:after &#123;content: "The End.";&#125; //给文档末尾加一个结束语 小结通过根据文档的内容来使用选择器，创作人员可以创建丰富的CSS规则。可以对少量元素或大量元素应用简单规则，还可以对规则和选择器分组使得样式表简洁灵活，缩短文件大小和下载时间 要正确理解选择器以及如何组合选择器，需要深入地掌握选择器和文档结构的关系，并了解继承和层叠机制在确定如何为元素设置样式时有怎样的作用。这正是下一章要讨论的内容]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【CSS权威指南】第一章学习笔记：CSS和文档]]></title>
    <url>%2F2018%2F08%2F12%2F%E3%80%90CSS%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E3%80%91%E7%AC%AC%E4%B8%80%E7%AB%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9ACSS%E5%92%8C%E6%96%87%E6%A1%A3%2F</url>
    <content type="text"><![CDATA[Web的衰落一片混乱 非结构化页面建立索引困难 非结构化降低访问性 高级页面表现只能应用结构化 结构化更易维护 CSS作救星丰富的样式易于使用在多个页面使用样式：引用层叠：冲突规则缩减文件大小：更少的元素为将来做准备：去除样式元素元素元素是文档结构的基础；每个元素生成一个框（box，也称为盒） 替换和非替换元素替换元素：替换元素内容的部分并非由文档内容直接表示 非替换元素：其内容由用户代理（通常为一个浏览器）在元素本身生成的框中显示 元素显示角色块级元素：生成一个元素框默认填满父元素的内容区（理解：在元素框前后生成“分隔符”） 行内元素：在一个文本行内生成元素框 display其他值：章2、7详细讨论 结合CSS和HTML@import指令用于导入外部样式表，放在元素中，所有其他CSS规则之前。 1@import url(sheet.css) link元素用于导入外部样式表，必须放在head元素中 1&lt;link rel="stylesheet" type="text/css" href="xxxx.css" /&gt; 候选样式表： 候选样式表的rel属性值设为“alternate alternate”即可在浏览器中选择不同样式表显示，值为“Default”的为首选样式表 123&lt;link rel="stylesheet" type="text/css" href="xxxx1.css" title="Default" /&gt;&lt;link rel="alternate alternate" type="text/css" href="xxxx2.css" title="Big Test!" /&gt;&lt;link rel="alternate alternate" type="text/css" href="xxxx3.css" title="Crazy colors!" /&gt; style元素文档样式表直接嵌套在文档之中 1&lt;style type="text/css"&gt;&lt;/style&gt; 内联样式放在元素开元素style属性中，为单个元素指定样式，不需要嵌套和外部样式表 1&lt;p style="color:gray;"&gt;嘻嘻嘻&lt;/p&gt; 具体的样式规则见章2 CSS注释1/*this is a comment*/ 小结利用CSS，可能会完全改变用户代理表现元素的方式。用户不会知道是通过外部样式表还是嵌套样式表甚至是内联样式完成的。外部样式真正的意义在于，它允许创作人员将网站的所有表现信息都放在同一个位置，将所有文档都指向这个位置。这使得网络的更新和维护变得容易，还有助于节省带宽，因为文档中去除了表现信息 为了充分利用CSS的强大功能，创作人员需要了解如何将一组样式与文档中的元素相关联。CSS以何种方式选择文档中要应用样式的部分，这正是下一章的主题]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
</search>
